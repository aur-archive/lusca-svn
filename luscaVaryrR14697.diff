Index: src/store_vary.c
===================================================================
--- src/store_vary.c	(revision 14697)
+++ src/store_vary.c	(working copy)
@@ -311,7 +311,7 @@
  * At leas one of key or etag must be specified, preferably both.
  */
 void
-storeAddVary(const char *url, method_t * method, const cache_key * key, const char *etag, const char *vary, const char *vary_headers, const char *accept_encoding)
+storeAddVary(const char *store_url, const char *url, method_t * method, const cache_key * key, const char *etag, const char *vary, const char *vary_headers, const char *accept_encoding)
 {
     AddVaryState *state;
     request_flags flags = null_request_flags;
@@ -325,13 +325,15 @@
 	state->accept_encoding = xstrdup(accept_encoding);
     if (etag)
 	state->etag = xstrdup(etag);
-    state->oe = storeGetPublic(url, method);
+    state->oe = storeGetPublic(store_url ? store_url : url, method);
     debug(11, 2) ("storeAddVary: %s (%s) %s %s\n",
 	state->url, state->key, state->vary_headers, state->etag);
     if (state->oe)
 	storeLockObject(state->oe);
     flags.cachable = 1;
     state->e = storeCreateEntry(url, flags, method);
+	if (store_url)
+	storeEntrySetStoreUrl(state->e, store_url);
     httpReplySetHeaders(state->e->mem_obj->reply, HTTP_OK, "Internal marker object", "x-squid-internal/vary", -1, -1, squid_curtime + 100000);
     httpHeaderPutStr(&state->e->mem_obj->reply->header, HDR_VARY, vary);
     storeSetPublicKey(state->e);
Index: src/store_vary.h
===================================================================
--- src/store_vary.h	(revision 14697)
+++ src/store_vary.h	(working copy)
@@ -4,7 +4,7 @@
 extern void storeLocateVaryDone(VaryData * data);
 extern void storeLocateVary(StoreEntry * e, int offset, const char *vary_data,
     String accept_encoding, STLVCB * callback, void *cbdata);
-extern void storeAddVary(const char *url, method_t * method, const cache_key * key,
+extern void storeAddVary(const char *store_url, const char *url, method_t * method, const cache_key * key,
     const char *etag, const char *vary, const char *vary_headers,
     const char *accept_encoding);
 
Index: src/store.c
===================================================================
--- src/store.c	(revision 14697)
+++ src/store.c	(working copy)
@@ -553,7 +553,7 @@
 	    stringClean(&varyhdr);
 #endif
 	    str = stringDupToC(&vary);
-	    storeAddVary(mem->url, mem->method, newkey, httpHeaderGetStr(&mem->reply->header, HDR_ETAG), str, mem->vary_headers, mem->vary_encoding);
+	    storeAddVary(mem->store_url, mem->url, mem->method, newkey, httpHeaderGetStr(&mem->reply->header, HDR_ETAG), str, mem->vary_headers, mem->vary_encoding);
 	    safe_free(str);
 	    stringClean(&vary);
 	}
Index: src/client_side_etag.c
===================================================================
--- src/client_side_etag.c	(revision 14697)
+++ src/client_side_etag.c	(working copy)
@@ -63,7 +63,7 @@
 	    if (etag && vary) {
 		char *str;
 		str = stringDupToC(&request->vary_encoding);
-		storeAddVary(url, entry->mem_obj->method, NULL, httpHeaderGetStr(&rep->header, HDR_ETAG), request->vary_hdr, request->vary_headers, str);
+		storeAddVary(entry->mem_obj->store_url, entry->mem_obj->url, entry->mem_obj->method, NULL, httpHeaderGetStr(&rep->header, HDR_ETAG), request->vary_hdr, request->vary_headers, str);
 		safe_free(str);
 	    }
 	}
